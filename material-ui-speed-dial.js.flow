// @flow

export type PresetRawType = {
	root: { [key: string]: number | string },
	button: { [key: string]: number | string },
	list: { [key: string]: number | string },
	item: { [key: string]: number | string },
	firstItem: { [key: string]: number | string },
	avatar: { [key: string]: number | string },
	label: { [key: string]: number | string },
};

export type PresetType = {
	root: string,
	button: string,
	list: string,
	item: string,
	firstItem: string,
	avatar: string,
	label: string,
};

export type StateEnumType = 'closed' | 'opening' | 'opened' | 'closing';
export type SpeedDialStateType = {
	state: StateEnumType,
};

export type RenderPropsType = {
	state: StateEnumType,
	className: string,
};
export type RenderButtonPropsType = {
	key?: string,
	className: string,
	onClick: () => void,
};
export type RenderButtonIconPropsType = {
	className: string,
};
export type RenderOpenedButtonPropsType = {
	key: string,
	className: string,
	onClick: () => void,
};
export type RenderOpenedButtonIconPropsType = {
	className: string,
};
export type RenderListPropsType = {
	children: React$Node,
	className: string,
};

export type RenderAvatarPropsType = {
	className: string,
};
export type RenderLabelPropsType = {
	className: string,
};

export type SpeedDialLabelPropsType = {
	className: string,
	text: string,
};

export type SpeedDialItemPropsType = {
	className: string,
	preset: PresetType,
	state: StateEnumType,
	renderAvatar?: (props: RenderAvatarPropsType) => React$Element<*>,
	children: (props: RenderLabelPropsType) => React$Element<*>,
};

export type SpeedDialPropsType = {
	children: (props: RenderPropsType) => React$Node,
	className?: string,
	preset: PresetType,
	animationDelay?: number,
	renderButton: (props: RenderButtonPropsType, propsIcon: RenderOpenedButtonIconPropsType) => React$Element<*>,
	renderOpenedButton?: (
		props: RenderOpenedButtonPropsType,
		propsIcon: RenderOpenedButtonIconPropsType
	) => React$Element<*>,
	renderList: (props: RenderListPropsType) => React$Element<*>,
};
